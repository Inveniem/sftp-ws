/// <reference path="client/SFTPv3.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SftpClientInner = require("./client/SFTPv3");

var stream = require("stream");

var WebSocketStream = (function (_super) {
    __extends(WebSocketStream, _super);
    function WebSocketStream(ws, options) {
        _super.call(this, {});
        this.ws = ws;
        this.options = options;
    }
    WebSocketStream.prototype._write = function (data, encoding, callback) {
        var _this = this;
        var buffer = data;
        if (!Buffer.isBuffer(buffer)) {
            _super.prototype.emit.call(this, "error", new Error("Only Buffer writes are currently supported"));
            return;
        }

        this.ws.send(buffer, this.options, function (err) {
            if (err != null) {
                _super.prototype.emit.call(_this, 'error', err);
            }

            if (typeof callback === "function") {
                callback(); //TODO: are there any arguments?
            }
        });
    };
    return WebSocketStream;
})(stream.Writable);

var SftpClient = (function (_super) {
    __extends(SftpClient, _super);
    function SftpClient(ws) {
        var _this = this;
        _super.call(this, new WebSocketStream(ws, {}), "");

        ws.on('message', function (data, flags) {
            var packet;
            if (flags.binary) {
                packet = data;
            } else {
                console.log("Text packet received, but not supported yet.");
                ws.close(1002); //TODO: check code
                return;
            }

            _this._parse(packet);
        });
    }
    return SftpClient;
})(SftpClientInner);
exports.SftpClient = SftpClient;
//# sourceMappingURL=sftp-client.js.map
